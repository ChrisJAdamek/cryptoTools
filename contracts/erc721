// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/draft-ERC721Votes.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts@4.5.0/token/ERC721/extensions/ERC721Royalty.sol";
import "@openzeppelin/contracts@4.5.0/interfaces/IERC2981.sol";

contract CryptoTools is ERC721, ERC721URIStorage, Ownable, EIP712, ERC721Votes {
    using Counters for Counters.Counter;

    Counters.Counter private _tokenIdCounter;

    constructor() ERC721("cryptoTools", "TOOLS") EIP712("cryptoTools", "1") {}
    function contractURI() public view returns (string memory) {
        return "ipfs://bafybeiaibnlttzn5unrqe7nnn3b2fgiwh75kqyuedv6cbz5mhlg4int2ly/ContractMetadata.txt";
    }

    function _baseURI() internal pure override returns (string memory) {
        return "ipfs://bafybeigqvxys7yrgqewejvy5fbbwfdqifzgafqvxjsxn4dswplezgp4eom/";
    }

    function safeMint(address to, string memory uri) public onlyOwner {
        uint256 tokenId = _tokenIdCounter.current();
        _tokenIdCounter.increment();
        _safeMint(to, tokenId);
        _setTokenURI(tokenId, uri);
    }

    // The following functions are overrides required by Solidity.

    function _afterTokenTransfer(address from, address to, uint256 tokenId)
        internal
        override(ERC721, ERC721Votes)
    {
        super._afterTokenTransfer(from, to, tokenId);
    }

    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {
        super._burn(tokenId);
    }

    function tokenURI(uint256 tokenId)
        public
        view
        override(ERC721, ERC721URIStorage)
        returns (string memory)
    {
        return super.tokenURI(tokenId);
    }
}
